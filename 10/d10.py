from operator import itemgetter
from collections import namedtuple
import numpy as np
import matplotlib.pyplot as plt
from time import sleep


Position = namedtuple('Position', ['x', 'y'])
Velocity = namedtuple('Velocity', ['x', 'y'])

def add(pos, vel):
    return Position(pos.x + vel.x, pos.y + vel.y)


class Points:
    def __init__(self, file):
        with open(file) as inp:
            self.positions = [
                self.get_position(row.strip()) for row in inp.readlines()
            ]
        with open(file) as inp:
            self.velocities = [
                self.get_velocity(row.strip()) for row in inp.readlines()
            ]
        min_x = min(self.positions, key=itemgetter(0))[0]
        min_y = min(self.positions, key=itemgetter(1))[1]
        max_x = max(self.positions, key=itemgetter(0))[0] + 1
        max_y = max(self.positions, key=itemgetter(1))[1] + 1
        self.xy_range = (min_x, min_y, max_x, max_y)

    def __next__(self):
        for i, v in enumerate(self.velocities):
            self.positions[i] = add(self.positions[i], v)

    def __str__(self):
        min_x, min_y, max_x, max_y = self.xy_range
        s = ''
        for y in range(min_y, max_y):
            for x in range(min_x, max_x):
                s += '#' if (x, y) in self.positions else '.'
            s += '\n'
        return s[:-1]

    def get_position(self, row):
        parts = row.split('<')
        p = parts[1].replace(' ', '').replace('>velocity=', '').split(',')
        return Position(int(p[0]), int(p[1]))

    def get_velocity(self, row):
        parts = row.split('<')
        v = parts[2].replace('>', '').replace(' ', '').split(',')
        return Velocity(int(v[0]), int(v[1]))

    def draw(self):
        plt.scatter([p.x for p in self.positions], [p.y for p in self.positions])
        plt.show()

test_outputs = [
"""
........#.............
................#.....
.........#.#..#.......
......................
#..........#.#.......#
...............#......
....#.................
..#.#....#............
.......#..............
......#...............
...#...#.#...#........
....#..#..#.........#.
.......#..............
...........#..#.......
#...........#.........
...#.......#..........
"""[1:-1],
"""
......................
......................
..........#....#......
........#.....#.......
..#.........#......#..
......................
......#...............
....##.........#......
......#.#.............
.....##.##..#.........
........#.#...........
........#...#.....#...
..#...........#.......
....#.....#.#.........
......................
......................
"""[1:-1],
"""
......................
......................
......................
..............#.......
....#..#...####..#....
......................
........#....#........
......#.#.............
.......#...#..........
.......#..#..#.#......
....#....#.#..........
.....#...#...##.#.....
........#.............
......................
......................
......................
"""[1:-1],
"""
......................
......................
......................
......................
......#...#..###......
......#...#...#.......
......#...#...#.......
......#####...#.......
......#...#...#.......
......#...#...#.......
......#...#...#.......
......#...#..###......
......................
......................
......................
......................
"""[1:-1],
"""
......................
......................
......................
............#.........
........##...#.#......
......#.....#..#......
.....#..##.##.#.......
.......##.#....#......
...........#....#.....
..............#.......
....#......#...#......
.....#.....##.........
...............#......
...............#......
......................
......................
"""[1:-1],
]

def test(data, outputs):
    for o in outputs:
        assert str(data) == o
        next(data)

test_data = Points('test_input')

def test(data, outputs):
    for i, o in enumerate(test_outputs):
        assert str(data) == o, i
        next(data)

test(test_data, test_outputs)

data = Points('test_input')

data.draw()
for i in range(4):
    next(data)
    data.draw()

data = Points('input')

data.draw()

while True:
    for i in range(10000):
        next(data)
    data.draw()
